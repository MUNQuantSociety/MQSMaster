# This is the name of your workflow, which will appear in the "Actions" tab of your GitHub repository.
name: Python CI/CD Pipeline

# This section defines when the workflow should be triggered.
# This section defines when the workflow should be triggered.
on:
  push:
    branches: [ "nas_refactor" ] # Runs on pushes to the nas_refactor branch
  pull_request:
    branches: [ "nas_refactor" ] # Runs on pull requests targeting the nas_refactor branch
# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This job is named "build-and-test". You can name it anything you want.
  build-and-test:
    # The type of runner that the job will run on. "ubuntu-latest" is a good default.
    runs-on: ubuntu-latest

    # A job is a sequence of steps.
    steps:
      # Step 1: Check out your repository code so the workflow can access it.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment.
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # You can specify any version you need.

      # Step 3: Install project dependencies and development tools.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # Step 4: Lint the code with flake8.
      # This command will check for style errors and stop the build if any are found.
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Step 5: Run tests with pytest.
      # This command will discover and run all tests in your "tests/" directory.
      - name: Test with pytest
        # This 'env' block makes GitHub Secrets available as environment variables
        # for the 'run' command that follows.
        env:
          host: ${{ secrets.DB_HOST }}
          port: ${{ secrets.DB_PORT }}
          database: ${{ secrets.DB_NAME }}
          db_user: ${{ secrets.DB_USER }}
          password: ${{ secrets.DB_PASSWORD }}
          sslmode: 'require' # Or pull from secrets if it varies
        run: |
          pytest